//
// Created by s1805689 on 12/03/2024.
//

#include "CNNNet.h"



void cnn_forward(input_type input[IN_CH], output_type output[OUT_CH]) {
#pragma HLS ARRAY_PARTITION  type=complete variable=input
#pragma HLS ARRAY_PARTITION  type=complete variable=output

/*
fc_in Layer
    self.fc_in = nn.Sequential(
        nn.Linear(15, 64),
        nn.ReLU(),
    )
*/

    //---------------------- ----- ----------------------
    //---------------------- STANDARD ----------------------
    //---------------------- ----- ----------------------

    input_type input_STD[15];
// MODIFY meanVal BEGIN
    input_type meanVal[15] = {0.0924700000000000,0.123789000000000,0.236858000000000,0.204374000000000,0.101442000000000,0.131227000000000,0.229822000000000,-0.150330000000000,0.362273000000000, 0, 0, 0, 0, 0, 0};
// MODIFY meanVal END
// MODIFY stdVal BEGIN
    input_type stdVal[15] = {0.0160500679945081,0.0160816991485898,0.00819211747575105,0.00820460277395158,0.0162277453714210,0.0638873415729690,0.0162777629659178,0.0637734481416959,0.0871408967216549, 1, 1, 1, 1, 1, 1};
// MODIFY stdVal END
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=input_STD
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=meanVal
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=stdVal

    for (int i = 0; i < 15; ++i) {
        input_STD[i] = (input[i] - meanVal[i]) * stdVal[i];
//        std::cout << "input_STD : " << input_STD[i] << endl;
    }

    //---------------------- ----- ----------------------
    //---------------------- FC  1 ---------------------- // checked
    //---------------------- ----- ----------------------

    input_type layer1_out[36];
// MODIFY bias1 BEGIN
input_type bias1[OUT_FC_1] = { 0.4246,  0.2379,  0.0917,  0.1462, -0.2522,  0.0307,  0.0770,  0.2268,        -0.1274, -0.2435,  0.1685, -0.2435, -0.0010,  0.1503, -0.1804,  0.1232,         0.0822, -0.0905,  0.0340,  0.2498,  0.1090, -0.0506,  0.1838, -0.3044,         0.0740,  0.0378, -0.3596, -0.0864,  0.1748, -0.7134,  0.1598, -0.1274,        -0.1208, -0.0803,  0.0546,  0.0726};
// MODIFY bias1 END
// MODIFY weight1 BEGIN
input_type weights1[IN_HEIGHT_FC_1][IN_WIDTH_FC_1] = {{-4.0088e-01,  6.6711e-02, -4.2297e-02,  0.0000e+00,  4.2310e-01,         -1.8103e-01, -6.5491e-02,  0.0000e+00, -9.4543e-02, -5.9717e-01,         -0.0000e+00, -0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00},        {-4.8682e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00,  4.7046e-01,         -0.0000e+00,  0.0000e+00,  0.0000e+00, -0.0000e+00, -1.4746e-01,         -9.1309e-02,  1.2781e-01, -0.0000e+00,  0.0000e+00,  2.0935e-02},        { 3.3838e-01,  1.5930e-01,  0.0000e+00,  4.2938e-02, -3.2324e-01,          3.6224e-02, -1.6895e-01, -0.0000e+00,  0.0000e+00, -1.4453e-01,          6.6956e-02, -6.2012e-02, -0.0000e+00,  0.0000e+00,  0.0000e+00},        { 4.7754e-01,  5.5225e-01,  0.0000e+00,  5.9998e-02, -4.6558e-01,         -0.0000e+00, -5.5469e-01,  0.0000e+00,  3.1952e-02,  1.2286e-01,          3.4607e-02,  1.9897e-01, -0.0000e+00, -0.0000e+00,  1.1993e-02},        {-2.7612e-01,  1.5222e-01, -1.5186e-01,  2.9590e-01,  3.0005e-01,          0.0000e+00, -1.4771e-01,  0.0000e+00, -1.0046e-01,  8.0566e-02,         -1.1444e-01,  1.4368e-01,  5.9784e-02, -1.0443e-01,  3.1677e-02},        {-4.5361e-01, -1.4319e-01, -2.3547e-01,  3.9795e-02,  4.7510e-01,          0.0000e+00,  1.5479e-01, -0.0000e+00,  4.9774e-02, -1.1115e-01,         -1.2671e-01, -0.0000e+00,  1.1176e-01, -5.9540e-02, -5.6213e-02},        {-0.0000e+00,  0.0000e+00, -0.0000e+00,  6.5247e-02,  4.3869e-03,         -0.0000e+00, -0.0000e+00,  2.2720e-02, -0.0000e+00, -8.1970e-02,         -0.0000e+00, -4.1168e-02,  0.0000e+00, -0.0000e+00,  0.0000e+00},        { 4.5703e-01, -3.8428e-01,  0.0000e+00,  3.0701e-02, -4.4287e-01,          8.7708e-02,  3.8330e-01, -0.0000e+00,  0.0000e+00,  2.0813e-01,         -8.7280e-02,  4.4281e-02,  0.0000e+00, -0.0000e+00,  0.0000e+00},        { 9.7168e-02, -1.4563e-01,  0.0000e+00, -5.0140e-02, -9.9060e-02,         -0.0000e+00,  1.5686e-01, -1.1230e-01,  0.0000e+00, -4.3884e-02,         -2.5317e-01,  1.4795e-01,  0.0000e+00,  0.0000e+00, -0.0000e+00},        {-2.4280e-01, -2.4280e-01, -0.0000e+00, -2.1927e-02,  2.3145e-01,         -1.1310e-01,  2.4390e-01, -1.9849e-01,  1.0553e-01,  0.0000e+00,          0.0000e+00,  7.0166e-01,  0.0000e+00,  0.0000e+00, -0.0000e+00},        {-3.8135e-01, -3.4180e-01, -0.0000e+00,  3.0029e-02,  3.7500e-01,         -0.0000e+00,  3.2544e-01, -0.0000e+00,  0.0000e+00,  6.5552e-02,          5.3894e-02,  2.3743e-01, -0.0000e+00, -0.0000e+00, -6.6996e-04},        {-6.6895e-02, -1.9788e-01,  1.6833e-01,  0.0000e+00,  6.0333e-02,         -3.3813e-02,  1.9519e-01, -2.3987e-02, -0.0000e+00, -1.4160e-01,         -1.0608e-01,  3.4937e-01, -4.2877e-02,  8.8806e-02,  3.4973e-02},        {-0.0000e+00,  0.0000e+00, -0.0000e+00,  0.0000e+00, -0.0000e+00,          0.0000e+00,  0.0000e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00},        { 4.7559e-01, -5.1318e-01,  2.3727e-02, -0.0000e+00, -4.7485e-01,         -0.0000e+00,  5.0732e-01,  0.0000e+00,  0.0000e+00,  0.0000e+00,          0.0000e+00,  8.6914e-02, -0.0000e+00,  0.0000e+00,  0.0000e+00},        { 2.9739e-02,  9.2316e-03, -0.0000e+00,  3.4119e-02, -3.1921e-02,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -1.8445e-01, -3.6201e-03,  2.3682e-01, -2.3926e-01,  1.2366e-01},        {-1.8811e-01,  1.2177e-01, -2.2736e-02,  1.5564e-01,  1.8396e-01,         -0.0000e+00, -1.2793e-01,  0.0000e+00, -0.0000e+00, -8.6304e-02,          0.0000e+00,  1.4954e-01, -3.0289e-02,  3.6316e-02,  4.0855e-03},        { 1.1646e-01,  2.2327e-01, -1.3062e-01,  1.2073e-01, -1.2585e-01,          1.0718e-01, -2.2229e-01, -0.0000e+00,  3.1189e-02,  3.2959e-01,         -4.7516e-02, -2.8198e-01,  0.0000e+00, -5.9174e-02,  0.0000e+00},        {-1.8420e-01, -9.0637e-02, -9.9365e-02, -8.7891e-02,  1.8066e-01,          0.0000e+00,  9.8267e-02,  3.2776e-02, -0.0000e+00,  5.3516e-01,         -2.8418e-01, -1.6504e-01,  7.1411e-02, -0.0000e+00, -7.7393e-02},        { 1.0889e-01, -9.7778e-02, -2.6489e-01, -2.5952e-01, -1.0596e-01,          0.0000e+00,  8.8257e-02,  0.0000e+00, -4.6051e-02, -1.1389e-01,         -3.6353e-01,  5.9479e-02,  5.5969e-02,  1.6809e-01, -1.3452e-01},        {-5.3680e-02, -1.8896e-01,  0.0000e+00,  3.7842e-02,  4.9500e-02,         -1.2103e-01,  1.8848e-01, -1.0577e-01, -8.6182e-02, -6.6406e-01,         -1.7761e-01, -3.2544e-01, -2.5604e-02,  0.0000e+00,  0.0000e+00},        { 2.3828e-01, -0.0000e+00, -0.0000e+00, -3.9490e-02, -2.4036e-01,         -0.0000e+00,  0.0000e+00, -7.1838e-02, -2.1033e-01, -4.2798e-01,          1.4172e-01, -0.0000e+00, -0.0000e+00,  0.0000e+00, -0.0000e+00},        { 6.8420e-02,  2.2766e-01,  0.0000e+00,  0.0000e+00, -7.7026e-02,         -1.6968e-02, -2.4048e-01, -0.0000e+00, -2.3608e-01,  1.9202e-01,          8.1177e-02,  0.0000e+00, -0.0000e+00,  0.0000e+00,  0.0000e+00},        { 1.5906e-01,  3.2153e-01,  1.9556e-01,  3.4790e-01, -1.4856e-01,         -2.8015e-02, -3.3569e-01, -2.7237e-02,  6.8726e-02, -1.6711e-01,         -1.5808e-01, -5.2295e-01, -4.3091e-02, -8.4351e-02,  1.4148e-01},        {-1.6003e-01, -6.2744e-02, -1.9470e-01, -8.5449e-02,  1.7200e-01,         -7.3853e-02,  7.0435e-02,  1.5297e-02,  4.3884e-02, -2.6440e-01,          1.8542e-01, -7.1655e-02,  2.0471e-01,  8.6670e-02, -5.0140e-02},        {-2.5708e-01,  1.5735e-01, -0.0000e+00, -0.0000e+00,  2.6294e-01,          4.4983e-02, -1.5479e-01,  1.2199e-02,  3.3295e-02,  1.7676e-01,          1.8127e-01,  9.0332e-02,  0.0000e+00,  1.1284e-02, -0.0000e+00},        { 2.5659e-01,  7.7637e-02,  1.3281e-01, -1.8408e-01, -2.8955e-01,          0.0000e+00, -9.3506e-02,  0.0000e+00,  0.0000e+00,  0.0000e+00,          1.5430e-01, -0.0000e+00, -4.3060e-02,  6.2805e-02, -0.0000e+00},        {-2.2522e-01,  1.2939e-01,  1.3086e-01, -0.0000e+00, -0.0000e+00,         -1.5198e-01, -0.0000e+00, -4.0283e-02,  7.7515e-02, -1.5625e-02,         -1.1218e-01, -1.1145e-01, -1.5857e-01, -1.2207e-01,  0.0000e+00},        {-2.4182e-01, -4.1187e-01, -7.7759e-02, -8.1055e-02,  2.5952e-01,         -0.0000e+00,  4.1895e-01,  0.0000e+00,  0.0000e+00,  2.1167e-01,          1.5894e-01,  1.6724e-01,  0.0000e+00,  0.0000e+00, -0.0000e+00},        {-3.1689e-01, -3.0396e-01,  1.7670e-02,  0.0000e+00,  3.3716e-01,          0.0000e+00,  3.0469e-01, -0.0000e+00,  1.2402e-01,  0.0000e+00,          6.6345e-02,  5.1971e-02, -3.0365e-02,  0.0000e+00,  4.5502e-02},        {-1.2091e-01, -9.1614e-02, -0.0000e+00,  6.1676e-02,  1.1627e-01,         -2.4878e-01,  9.4971e-02,  4.4507e-01,  2.6318e-01,  4.8096e-02,         -1.7212e-01,  9.1064e-02,  2.3300e-02, -4.9194e-02,  0.0000e+00},        { 0.0000e+00, -1.5051e-01, -7.4646e-02,  1.0974e-01, -0.0000e+00,         -0.0000e+00,  1.5857e-01, -5.4474e-02, -4.1382e-02,  0.0000e+00,         -3.2324e-01, -5.7922e-02,  0.0000e+00, -1.8768e-02,  0.0000e+00},        { 3.9331e-01, -1.1841e-01,  1.4807e-01, -3.3374e-01, -4.2383e-01,          0.0000e+00,  1.2427e-01,  0.0000e+00,  6.5002e-02, -0.0000e+00,          1.1383e-01, -1.6919e-01, -5.6274e-02,  1.3489e-01, -3.4271e-02},        { 3.2764e-01, -1.3269e-01, -4.7729e-02,  2.9556e-02, -3.0981e-01,          0.0000e+00,  1.3062e-01,  6.5063e-02, -6.0608e-02,  0.0000e+00,          1.9324e-01, -2.6172e-01,  1.3962e-02, -3.2379e-02, -1.9531e-02},        {-6.8298e-02,  4.5312e-01, -4.5013e-02,  7.0129e-02,  7.1045e-02,         -7.4219e-02, -4.5312e-01,  1.8079e-01,  4.7211e-02,  4.4067e-02,          5.7471e-01,  0.0000e+00, -0.0000e+00, -1.2131e-02, -0.0000e+00},        { 4.1748e-01, -0.0000e+00,  2.4622e-01,  3.5362e-03, -4.3579e-01,         -0.0000e+00, -0.0000e+00,  0.0000e+00, -3.8605e-02, -1.6162e-01,          1.0278e-01,  7.0312e-02, -8.5999e-02,  3.8177e-02,  4.1199e-02},        { 3.3875e-02, -0.0000e+00, -5.5725e-02, -2.4255e-01, -7.2937e-02,          0.0000e+00,  0.0000e+00,  7.6965e-02, -0.0000e+00,  2.0972e-01,         -3.1885e-01, -3.0908e-01,  4.9011e-02,  3.3386e-02, -8.7646e-02}};
// MODIFY weight1 END
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=layer1_out
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=bias1
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=weights1

    for (int i = 0; i < 36; i++) {
#pragma HLS UNROLL
        layer1_out[i] = bias1[i];
        for (int j = 0; j < 15; j++) {
            layer1_out[i] += input_STD[j] * weights1[i][j];
        }
        // nn.ReLU()
        if (layer1_out[i] > 0){
            layer1_out[i] = layer1_out[i];
        } else{
            layer1_out[i] = 0;
        }
    }

    //---------------------- ----- ----------------------
    //---------------------- Reshape ----------------------
    //---------------------- ----- ----------------------

    input_type conv1_in[1][36][1] = {};
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=conv1_in
    for (int i = 0; i < 1; i++)
    {
        for (int j = 0; j < 36; j++)
        {
#pragma HLS UNROLL
            for (int k = 0; k < 1; k++)
            {
                conv1_in[i][j][k] = layer1_out[i * 36 + j];
//                std::cout << "fc_in" << conv1_in[i][j][k] << endl;
            }
        }
    }

    //---------------------- ----- ----------------------
    //---------------------- Conv1 ----------------------
    //---------------------- ----- ----------------------
// MODIFY weight_conv1 BEGIN
input_type W_CNN_1[1][3][1][4] = {{{{ 0.0751,  0.3247,  0.8433, -0.0000}},        {{ 0.5581, -0.4827,  0.0000,  0.2751}},        {{ 0.0000, -0.4841,  0.1004,  0.1388}}}};
// MODIFY weight_conv1 END
// MODIFY bias_conv1 BEGIN
input_type bias_CNN_1[4] = { 2.2483e-04,  3.0041e-04, -6.0141e-05, -7.4029e-05};
// MODIFY bias_conv1 END
    input_type conv1_out[1][36][4] = {};
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=W_CNN_1
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=bias_CNN_1
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=conv1_out
    Conv(IN_CH_CNN_1,IN_HEIGHT_CNN_1,IN_WIDTH_CNN_1,OUT_CH_CNN_1,
         KERNEL_WIDTH_CNN_1,KERNEL_HEIGHT_CNN_1,X_STRIDE_CNN_1,Y_STRIDE_CNN_1,MODE_CNN_1,RELU_EN_CNN_1,
         conv1_in,W_CNN_1,bias_CNN_1,conv1_out);


    input_type pool1_out[1][18][4] = {};
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=pool1_out
    Pool(IN_CH_POOL_1 ,IN_HEIGHT_POOL_1 ,IN_WIDTH_POOL_1 ,
         KERNEL_WIDTH_POOL_1 ,KERNEL_HEIGHT_POOL_1 ,MODE_POOL_1 ,
         conv1_out,pool1_out);//mode: 0:MEAN, 1:MIN, 2:MAX

     //---------------------- ----- ----------------------
    //---------------------- attention1.pool1 ----------------------
    //---------------------- ----- ----------------------

//    input_type pool2_out[1][1][4] = {};
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=pool2_out
//    Pool_2(IN_CH_POOL_2 ,IN_HEIGHT_POOL_2 ,IN_WIDTH_POOL_2 ,
//           KERNEL_WIDTH_POOL_2 ,KERNEL_HEIGHT_POOL_2 ,MODE_POOL_2 ,
//           pool1_out,pool2_out);//mode: 0:MEAN, 1:MIN, 2:MAX


    //---------------------- ----- ----------------------
    //---------------------- attention1.conv1 + relu ----------------------
    //---------------------- ----- ----------------------

//    input_type W_CNN_2[1][1][4][2] = {{{{ 0.2258,  0.2623},          { 0.4247,  1.0438},          { 0.2921,  0.7027},          { 0.3157, -0.0011}}}};
//    input_type bias_CNN_2[2] = {0,0};
//    input_type conv2_out[1][1][2];
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=W_CNN_2
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=bias_CNN_2
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=conv2_out
//    Conv_2(IN_CH_CNN_2,IN_HEIGHT_CNN_2,IN_WIDTH_CNN_2,OUT_CH_CNN_2,
//         KERNEL_WIDTH_CNN_2,KERNEL_HEIGHT_CNN_2,X_STRIDE_CNN_2,Y_STRIDE_CNN_2,MODE_CNN_2,RELU_EN_CNN_2,
//           pool2_out,W_CNN_2,bias_CNN_2,conv2_out);

    //---------------------- ----- ----------------------
    //---------------------- attention1.conv2 + sigmoid ----------------------
    //---------------------- ----- ----------------------

//    input_type W_CNN_3[1][1][2][4] = {{{{ 0.4752,  0.4339, -0.0940,  0.3696},          { 0.7485,  0.6171,  0.5832,  0.3979}}}};
//    input_type bias_CNN_3[4] = {0,0,0,0};
//    input_type conv3_out[1][1][4];
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=W_CNN_3
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=bias_CNN_3
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=conv3_out
//    Conv_3(IN_CH_CNN_3,IN_HEIGHT_CNN_3,IN_WIDTH_CNN_3,OUT_CH_CNN_3,
//           KERNEL_WIDTH_CNN_3,KERNEL_HEIGHT_CNN_3,X_STRIDE_CNN_3,Y_STRIDE_CNN_3,MODE_CNN_3,RELU_EN_CNN_3,
//           conv2_out,W_CNN_3,bias_CNN_3,conv3_out);



    //---------------------- ----- ----------------------
    //---------------------- Expand and Multiplication ----------------------
    //---------------------- ----- ----------------------

//    input_type attention_out[3][3][4];
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=attention_out
//
//    Expand_and_Multiplication_loop_reg:
//    input_type Attention_gain[4] = {};
//#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=Attention_gain
//    for (int i = 0; i < 4; ++i) {
//        Attention_gain[i] = conv3_out[0][0][i] + 1;
//    }


//    Expand_and_Multiplication_loop:
//    for (int k = 0; k < 4; k++)
//    {
//#pragma HLS PIPELINE off
////#pragma HLS PIPELINE II=1
//        for (int i = 0; i < 3; i++)
//        {
////#pragma HLS UNROLL
//            for (int j = 0; j < 3; j++)
//            {
////#pragma HLS UNROLL
//                attention_out[i][j][k] = pool1_out[i][j][k] * Attention_gain[k];
//            }
//        }
//    }

    //---------------------- ----- ----------------------
    //---------------------- Reshape for FC2 ----------------------
    //---------------------- ----- ----------------------

    //  [3][3][4] -> 36
    int index = 0;
    input_type layer2_in[72] = {};
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=layer2_in
    for (int k = 0; k < 4; k++)
    {
#pragma HLS UNROLL
        for (int i = 0; i < 1; i++)
        {
#pragma HLS UNROLL
            for (int j = 0; j < 18; j++)
            {
#pragma HLS UNROLL
//                std::cout << "layer2_in " << pool1_out[i][j][k] << endl;
//                std::cout << "layer2_in " << layer2_in[index] << endl;

                layer2_in [index] = pool1_out[i][j][k];
//                std::cout << "layer2_in final " << layer2_in[index] << endl;
                index += 1;

            }
        }
    }

    //---------------------- ----- ----------------------
    //---------------------- FC  2 ----------------------
    //---------------------- ----- ----------------------

    input_type layer2_out[32];
// MODIFY bias2 BEGIN
input_type bias2[32] = { 0.3054,  0.0937, -0.0197,  0.0887,  0.1990, -0.2159,  0.0000, -0.2450,        -0.1564, -0.0199,  0.1666,  0.2141,  0.2469,  0.3694,  0.1378, -0.1153,        -0.0492,  0.1573,  0.2842, -0.0096, -0.0000, -0.2028,  0.0555,  0.2683,        -0.0889, -0.2888,  0.4106,  0.1749, -0.0631,  0.0536, -0.0862,  0.2329};
// MODIFY bias2 END
// MODIFY weight2 BEGIN
 input_type weights2[32][72] = {{ 1.8066e-01,  3.5522e-01, -0.0000e+00,  1.4258e-01, -0.0000e+00,         -4.5630e-01,  7.5256e-02,  1.8298e-01,  1.5442e-01,  8.4351e-02,         -9.3689e-02, -0.0000e+00,  0.0000e+00, -1.1646e-01, -6.4941e-02,         -4.9957e-02, -2.7466e-01,  9.5886e-02,  9.2590e-02, -1.7715e-02,          3.4692e-01,  7.4524e-02,  2.3083e-01,  1.0321e-01,  2.0862e-01,          2.8589e-01,  4.9835e-02,  1.0156e-01,  2.0129e-01,  2.3608e-01,          0.0000e+00,  6.9287e-01,  1.7090e-01,  2.5220e-01,  1.0278e-01,          3.6865e-01,  2.3779e-01,  1.6431e-01,  3.4521e-01,  5.6763e-02,          1.4697e-01, -3.6816e-01,  1.2634e-01,  1.6663e-01,  1.5222e-01,         -0.0000e+00,  8.3984e-02,  1.1652e-01, -1.1163e-01,  6.9702e-02,         -2.0044e-01, -6.7810e-02, -9.4421e-02,  3.1421e-01, -1.1377e-01,          2.8467e-01, -1.5552e-01, -1.8478e-02, -2.7466e-01, -4.6191e-01,          2.3828e-01,  2.9932e-01, -1.0425e-01,  3.4088e-02, -2.0984e-01,          1.3647e-01,  1.1804e-01, -1.4001e-01, -1.6956e-01, -6.4758e-02,         -1.2006e-01,  2.8735e-01},        {-7.5623e-02, -2.8125e-01, -5.2295e-01, -1.1005e-01,  9.6924e-02,         -9.6191e-02,  4.4043e-01,  9.9792e-02,  0.0000e+00, -0.0000e+00,         -5.7129e-02, -1.0254e-01,  2.2180e-01,  1.5588e-01,  8.5632e-02,          2.9358e-02,  4.0674e-01,  9.0637e-02,  1.8604e-01,  1.1285e-01,          0.0000e+00,  2.0618e-01, -1.9470e-01, -1.6748e-01, -5.2295e-01,          1.0236e-01,  2.5024e-01, -1.0406e-01,  2.2437e-01, -3.1763e-01,         -9.1614e-02, -1.4209e-01, -6.3782e-02,  3.7048e-02,  4.5361e-01,          1.0986e-01,  1.3989e-01, -1.8652e-01, -2.8931e-01, -0.0000e+00,         -1.7944e-01,  5.2429e-02, -6.7627e-02,  5.0195e-01,  8.3679e-02,         -2.0813e-01,  3.9276e-02, -7.4951e-02,  0.0000e+00,  1.9165e-01,          2.1912e-01,  1.0264e+00,  4.9146e-01,  1.2512e-01, -1.5308e-01,         -1.9312e-01,  6.7322e-02,  2.5073e-01, -7.1167e-02, -2.2412e-01,         -2.0660e-02,  2.0496e-01, -0.0000e+00, -1.3379e-01, -2.9907e-02,         -9.8999e-02, -0.0000e+00, -0.0000e+00,  3.7524e-01, -1.0150e-01,          4.0210e-01,  1.6711e-01},        { 3.7903e-02, -4.4067e-01, -1.2128e-01,  1.2988e-01,  1.3489e-01,          4.3262e-01,  3.9307e-01,  1.0779e-01, -0.0000e+00, -9.3933e-02,          1.5625e-01, -6.6406e-02,  1.7236e-01,  3.0811e-01, -9.9426e-02,         -0.0000e+00, -1.8652e-01,  3.0688e-01, -2.5000e-01,  1.2732e-01,         -1.0522e-01, -5.9814e-02, -9.2407e-02,  1.2299e-01, -3.1641e-01,          1.0010e-01,  1.9946e-01,  3.5431e-02, -1.6675e-01,  3.2544e-01,          1.5503e-01, -8.6121e-02,  1.7151e-01, -4.2139e-01,  5.1483e-02,         -6.1646e-02,  1.2000e-01,  1.8701e-01, -3.8525e-01,  1.5149e-01,          2.4670e-01,  0.0000e+00,  2.1741e-01,  4.2358e-01, -0.0000e+00,         -1.7651e-01,  9.1675e-02, -1.8665e-01,  4.7729e-02,  0.0000e+00,          1.4368e-01, -6.6797e-01,  3.6279e-01,  3.1311e-02, -4.6051e-02,         -4.9756e-01,  1.1603e-01,  1.5747e-01,  1.4355e-01,  3.6987e-01,          2.3682e-01, -3.7659e-02,  9.5459e-02, -0.0000e+00, -6.5613e-02,          1.2817e-02, -1.1200e-01,  2.9761e-01, -1.9348e-01,  1.9507e-01,         -1.7505e-01, -1.9751e-01},        {-1.8909e-01,  5.4590e-01, -2.6636e-01,  1.8176e-01, -0.0000e+00,         -2.9761e-01,  4.8877e-01, -2.5854e-01,  1.2439e-01,  0.0000e+00,          2.6074e-01,  2.3389e-01,  1.1627e-01, -1.3184e-01, -4.1199e-02,         -2.0740e-01, -0.0000e+00,  2.4023e-01,  2.2217e-01, -4.4238e-01,          3.8062e-01, -3.5553e-02,  2.9468e-01,  0.0000e+00, -3.4692e-01,          2.7002e-01, -9.1553e-02,  2.1326e-01, -1.1469e-01,  1.5063e-01,          4.1595e-02,  3.9917e-02, -4.5288e-02, -1.3770e-01,  1.3672e-01,          4.9072e-02, -0.0000e+00,  3.4454e-02,  4.7974e-01,  0.0000e+00,          3.2080e-01,  7.9590e-02,  4.3872e-01,  3.7231e-01,  6.0852e-02,          1.7126e-01, -6.8115e-02, -3.9581e-02,  0.0000e+00, -5.6915e-02,          4.7577e-02, -0.0000e+00,  2.2375e-01,  2.0523e-02, -6.4697e-01,          2.5049e-01,  5.2979e-02,  4.1870e-01, -0.0000e+00, -1.3330e-01,          2.9810e-01, -0.0000e+00, -0.0000e+00, -0.0000e+00, -6.0089e-02,          5.0201e-02,  9.7900e-02,  4.8248e-02, -0.0000e+00, -1.1115e-01,          7.2205e-02,  0.0000e+00},        { 3.2104e-01, -1.7627e-01,  0.0000e+00, -8.6182e-02,  1.8188e-01,          0.0000e+00,  8.5327e-02,  6.7566e-02,  5.9723e-02, -8.6670e-02,         -2.5269e-01,  7.9712e-02, -1.1932e-01,  1.8127e-01,  2.7246e-01,          7.2266e-02,  4.8798e-02, -2.5024e-01, -2.0654e-01,  4.2993e-01,         -1.5698e-01, -0.0000e+00, -7.8003e-02,  1.5894e-01,  2.4915e-01,          7.8125e-02,  2.9297e-01,  9.6619e-02,  5.1123e-01, -1.7896e-01,         -0.0000e+00,  5.8960e-02,  1.4185e-01,  5.2295e-01,  3.6713e-02,          2.4548e-01,  6.7444e-02,  2.2644e-01, -2.1277e-01,  0.0000e+00,         -1.1853e-01,  1.1493e-01, -1.5881e-01,  6.5796e-02, -4.5166e-02,          1.9238e-01,  4.7119e-02,  1.0718e-01,  1.0364e-01,  1.6370e-01,          1.5857e-01,  1.5869e-01, -3.1079e-01,  5.2521e-02,  4.4067e-01,         -0.0000e+00, -3.5205e-01, -6.2500e-02,  1.7017e-01,  3.8513e-02,          7.1106e-02,  1.2781e-01, -1.0748e-01,  1.7944e-01,  0.0000e+00,         -0.0000e+00, -1.0034e-01,  0.0000e+00,  9.5886e-02, -2.5928e-01,         -1.1517e-01,  3.9502e-01},        {-9.4238e-02,  3.2495e-01, -0.0000e+00,  9.1919e-02,  3.3716e-01,         -2.8101e-01, -3.9453e-01, -7.1655e-02,  0.0000e+00, -4.8035e-02,         -1.5625e-01,  1.6907e-01,  1.4001e-01, -6.6162e-02,  1.0712e-01,          2.5220e-01, -1.5540e-01,  2.5171e-01,  7.8064e-02, -0.0000e+00,         -0.0000e+00,  6.4209e-02,  6.7932e-02, -1.3171e-01, -1.6418e-01,         -2.3474e-01,  5.7281e-02, -2.5366e-01, -8.5144e-02,  3.0786e-01,          0.0000e+00, -2.0862e-01, -4.4312e-02, -1.4526e-01, -6.9678e-01,          1.5430e-01,  1.6455e-01, -4.0430e-01,  3.0200e-01,  0.0000e+00,         -9.7900e-02, -2.1838e-01, -3.6865e-02, -4.4580e-01,  9.5093e-02,         -4.1333e-01,  2.0923e-01,  2.4731e-01,  0.0000e+00,  9.9915e-02,         -0.0000e+00, -7.8662e-01, -1.9897e-01,  7.6843e-02, -3.7769e-01,          4.5386e-01, -2.3438e-01,  8.6853e-02,  1.2500e-01, -3.7524e-01,          1.1633e-01,  0.0000e+00,  1.0620e-01,  1.1963e-01,  0.0000e+00,          2.7637e-01,  1.2164e-01,  1.7908e-01,  2.3914e-01,  9.9731e-02,         -1.2164e-01,  1.3110e-01},        {-0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00},        { 1.7212e-01,  1.5869e-01, -1.6455e-01, -3.3887e-01, -1.6956e-01,          7.8674e-02, -5.4102e-01, -7.9834e-02, -1.0620e-01, -1.5149e-01,         -2.0886e-01, -0.0000e+00,  2.6709e-01, -0.0000e+00,  0.0000e+00,         -1.1237e-01,  6.3135e-01,  2.6538e-01,  1.9470e-01, -5.9668e-01,         -1.5894e-01,  4.3091e-01, -4.0332e-01, -6.1829e-02,  2.7319e-01,         -2.6074e-01, -1.0193e-01,  6.5186e-02, -8.7585e-02, -4.4067e-02,          0.0000e+00, -1.5393e-01, -1.1786e-01, -3.6084e-01,  9.7217e-01,         -1.4819e-01, -1.0944e-01,  1.8726e-01,  1.3635e-01, -1.0229e-01,         -4.8999e-01, -0.0000e+00,  4.0588e-02, -5.2100e-01, -2.0737e-02,          0.0000e+00, -3.7109e-01, -7.3975e-02,  1.8347e-01,  3.3905e-02,          7.4768e-02, -4.4604e-01,  3.4277e-01,  5.7178e-01,  8.7585e-02,          1.5698e-01, -3.2837e-02, -2.8857e-01, -0.0000e+00,  2.5952e-01,         -2.9053e-01, -4.4464e-02,  1.8750e-01, -1.4233e-01,  1.6724e-01,          0.0000e+00,  8.2214e-02, -0.0000e+00,  2.8394e-01,  1.4246e-01,          6.5088e-01, -5.0000e-01},        {-1.0339e-01, -8.2458e-02,  4.1455e-01,  1.0559e-01,  9.7168e-02,         -1.3330e-01,  8.2178e-01, -1.6675e-01, -1.0887e-02,  5.2979e-02,         -7.8613e-02, -8.2886e-02, -1.2646e-01, -0.0000e+00, -5.2887e-02,         -0.0000e+00, -9.1736e-02,  0.0000e+00, -3.9642e-02,  2.0706e-02,         -2.3877e-01, -8.3801e-02, -9.8328e-02, -1.7834e-01, -8.1934e-01,          1.9055e-01, -6.2622e-02, -5.0690e-02,  2.7441e-01,  1.2292e-01,         -3.9185e-01, -2.0398e-01,  0.0000e+00, -2.1753e-01,  2.5586e-01,          1.8274e-01,  1.3660e-01, -2.1265e-01, -1.3269e-01,  0.0000e+00,          2.4817e-01,  1.1346e-01,  3.6841e-01,  7.6123e-01,  1.8091e-01,         -6.5491e-02,  1.6748e-01, -4.5990e-02, -2.9907e-01, -0.0000e+00,         -2.4368e-02,  2.2424e-01,  4.9463e-01,  1.9092e-01, -2.0935e-01,         -1.3049e-01, -4.5068e-01,  1.2250e-01,  0.0000e+00,  1.0345e-01,          5.3760e-01,  1.1194e-01,  2.3376e-01,  8.5022e-02,  9.9182e-02,          1.3513e-01, -1.9336e-01,  1.2323e-01, -4.3793e-02,  8.1543e-02,          4.8920e-02,  1.6125e-01},        { 3.5156e-02,  3.8550e-01, -5.1971e-02,  0.0000e+00,  1.1725e-01,         -8.3496e-02, -3.3691e-01, -9.2651e-02, -1.2213e-01, -1.7358e-01,          7.5317e-02, -7.6965e-02,  1.9165e-01, -0.0000e+00,  2.3804e-01,          1.2378e-01,  2.0923e-01, -2.1210e-02, -5.9021e-02, -4.3793e-02,          2.6807e-01,  8.7280e-02,  3.5217e-02,  6.4392e-02,  2.5122e-01,         -2.6001e-01,  0.0000e+00,  0.0000e+00,  8.1543e-02, -0.0000e+00,          1.1456e-01,  7.7087e-02,  2.0007e-01,  0.0000e+00, -1.4929e-01,         -6.1432e-02, -1.5381e-01, -0.0000e+00,  4.6289e-01,  1.8420e-01,         -0.0000e+00,  8.9600e-02, -1.9791e-02, -4.9756e-01, -1.1243e-01,         -6.4758e-02, -0.0000e+00,  9.8083e-02,  3.7354e-01,  1.8933e-01,          1.4331e-01, -2.0898e-01,  8.5632e-02,  9.0576e-02, -0.0000e+00,          3.8184e-01, -2.7539e-01,  1.6431e-01,  1.7249e-01, -0.0000e+00,          1.0339e-01, -1.2225e-01, -0.0000e+00, -5.3986e-02,  1.3660e-01,          1.5063e-01,  3.9990e-01,  1.4084e-02,  4.0253e-02, -1.3098e-01,          2.7051e-01,  8.9417e-02},        {-2.2229e-01,  3.3789e-01,  3.6841e-01,  7.4036e-02,  2.1777e-01,         -5.4492e-01, -2.7271e-01, -5.8136e-02,  8.2581e-02,  1.6113e-01,          1.2756e-01,  1.5027e-01,  7.9468e-02, -3.9893e-01, -2.1143e-01,          2.4377e-01,  9.0881e-02,  1.9189e-01,  6.9519e-02,  1.1407e-01,          7.1106e-02,  5.4382e-02, -4.1504e-02, -9.0820e-02,  1.5417e-01,          1.3000e-01,  1.4038e-01, -5.9204e-02, -9.5215e-02, -5.1666e-02,         -3.7811e-02,  5.3711e-01,  1.8225e-01,  1.8542e-01,  3.2959e-01,          2.9980e-01,  1.1139e-01, -3.1470e-01,  3.9502e-01,  2.8149e-01,         -0.0000e+00, -2.1130e-01,  5.7373e-01, -2.7563e-01,  2.9590e-01,         -2.4133e-01,  1.9312e-01,  2.9492e-01, -0.0000e+00,  3.0786e-01,         -7.1899e-02, -7.2632e-02,  2.4304e-01,  9.0271e-02, -1.5625e-01,          4.4238e-01,  2.6587e-01,  2.0239e-01, -0.0000e+00, -3.8403e-01,          8.3694e-03,  7.4768e-02, -1.0815e-01,  3.6353e-01,  1.1835e-01,          1.7407e-01,  7.3486e-02, -5.1074e-01,  4.4495e-02,  1.9861e-01,          1.0394e-01,  3.5303e-01},        {-4.6021e-02,  8.5876e-02, -2.1765e-01, -5.8868e-02, -2.7676e+00,          1.0907e-01,  8.5022e-02, -1.8784e-02,  4.7302e-02,  1.9788e-01,          0.0000e+00,  1.6931e-01,  1.9800e-01, -2.0642e-01, -2.1472e-01,         -0.0000e+00,  1.4978e-01,  0.0000e+00, -1.3892e-01,  2.7124e-01,          1.4526e-01,  4.7168e-01,  7.6465e-01,  3.6987e-02,  1.0687e-01,          4.4922e-02,  5.6763e-02,  5.9326e-02, -1.0559e-01,  2.1622e-02,          1.9788e-01,  1.1047e-01,  2.1765e-01, -1.5662e-01, -1.7944e-01,         -0.0000e+00, -2.4048e-02,  2.7930e-01,  1.3025e-01,  1.3989e-01,         -1.3208e-01,  1.0559e-01,  2.6489e-01,  9.1492e-02, -1.3306e-01,          7.1350e-02, -0.0000e+00, -0.0000e+00,  1.5417e-01,  1.0260e-01,          1.3660e-01, -1.6736e-01,  0.0000e+00, -3.6255e-02,  8.8745e-02,         -3.8849e-02,  4.2163e-01,  1.0046e-01, -2.3027e+00,  1.7188e-01,         -2.2839e-01, -3.0838e-02, -1.0303e-01,  9.0088e-02,  0.0000e+00,         -8.0017e-02,  5.5298e-02, -3.1396e-01,  9.2590e-02,  9.1003e-02,         -5.1117e-02,  1.2459e-02},        { 1.9287e-01,  3.4180e-02,  2.6880e-01, -4.7951e-03,  9.8816e-02,          2.6978e-01, -8.6084e-01,  0.0000e+00,  1.6956e-01, -3.7842e-02,         -1.1078e-01,  1.2988e-01,  3.0371e-01,  1.0925e-01,  9.4421e-02,         -7.1716e-02,  1.5405e-01,  0.0000e+00, -1.0675e-01, -2.4829e-01,         -0.0000e+00,  7.2021e-02, -0.0000e+00,  1.8408e-01,  1.0225e+00,         -1.4294e-01,  2.4304e-01,  1.7151e-01,  3.8025e-02, -6.1554e-02,          2.6099e-01,  2.1387e-01,  0.0000e+00,  2.2070e-01, -3.2886e-01,          1.7993e-01, -7.5745e-02,  1.8201e-01,  0.0000e+00,  7.2876e-02,         -2.9248e-01,  1.0760e-01, -2.5073e-01, -7.7197e-01,  1.2421e-01,          0.0000e+00,  1.4539e-01,  0.0000e+00,  4.0723e-01,  1.1530e-01,          5.8044e-02, -3.2373e-01, -3.3838e-01,  0.0000e+00,  4.1919e-01,          1.1316e-01,  4.1479e-01, -2.2852e-01,  1.5640e-02,  9.3140e-02,         -5.1953e-01,  8.5083e-02, -1.2321e-03, -3.1647e-02,  1.5588e-01,          1.8726e-01,  4.0649e-02, -0.0000e+00,  2.5391e-02, -4.2163e-01,          8.3435e-02,  0.0000e+00},        { 7.8430e-02, -0.0000e+00,  4.6539e-02, -0.0000e+00, -1.1304e-01,         -1.4050e-01,  5.4395e-01,  0.0000e+00,  7.3364e-02,  0.0000e+00,          0.0000e+00,  2.8955e-01,  1.0663e-01, -3.0737e-01,  1.8018e-01,         -1.3708e-01, -2.0569e-01,  1.8640e-01,  2.2534e-01,  5.5615e-01,          1.4734e-01,  3.2983e-01,  5.2100e-01,  1.2671e-01, -3.1201e-01,          6.8262e-01, -2.1667e-01,  1.3232e-01,  4.9194e-02,  0.0000e+00,          5.1483e-02,  4.8950e-01,  1.4282e-01,  3.2568e-01,  3.2178e-01,          3.0273e-01, -0.0000e+00,  5.9235e-02, -8.1055e-02,  6.5422e-04,          1.6907e-01, -1.5259e-01,  1.5613e-01,  5.5420e-01, -2.0056e-01,          0.0000e+00,  0.0000e+00, -1.4343e-01, -3.8544e-02,  1.0883e-01,          6.0089e-02,  1.6467e-01,  9.8328e-02,  9.5947e-02,  3.3081e-01,         -4.3304e-02, -5.7129e-02,  6.5186e-02, -1.9434e-01, -3.6597e-01,          4.3066e-01, -2.5543e-02, -2.6782e-01, -5.9692e-02, -0.0000e+00,          1.6931e-01,  0.0000e+00, -2.5488e-01,  1.6309e-01, -1.6922e-02,          3.5248e-02,  2.2925e-01},        { 7.3669e-02, -1.0059e-01,  2.3059e-01,  1.6602e-01,  3.8025e-02,          4.5825e-01, -3.1909e-01,  3.6377e-02,  1.3062e-01,  0.0000e+00,          3.1616e-01,  1.8103e-01,  1.7236e-01,  1.4221e-01, -1.1310e-01,          1.9824e-01, -1.2183e-01,  2.3889e-01, -2.8003e-01, -9.5154e-02,         -1.4197e-01, -3.0853e-02,  8.1421e-02,  3.5059e-01,  7.2852e-01,         -1.5369e-01,  1.0211e-01,  2.4072e-01, -1.9617e-01,  2.6416e-01,          3.7231e-01,  2.2058e-01, -1.0455e-01,  0.0000e+00, -1.1963e-01,         -1.2445e-01,  6.3477e-02,  2.0923e-01, -1.0242e-01,  1.2695e-01,          0.0000e+00,  3.4790e-01, -1.4856e-01, -4.6802e-01, -6.0699e-02,          1.3708e-01,  2.5244e-01, -2.2961e-01,  1.0004e-01, -0.0000e+00,         -3.1158e-02, -4.6387e-02,  1.4809e-02, -1.6846e-01,  1.7310e-01,         -2.2803e-01,  8.0664e-01, -1.4917e-01,  1.7297e-01,  3.8843e-01,         -9.2529e-02, -4.7150e-02,  1.0913e-01, -8.8196e-02, -0.0000e+00,          4.3427e-02, -0.0000e+00,  1.7944e-01, -2.2485e-01,  7.4097e-02,         -1.4148e-01, -3.5107e-01},        {-6.2158e-01,  4.0137e-01, -1.6248e-01,  4.3433e-01, -0.0000e+00,         -1.9324e-01, -3.8550e-01, -1.5656e-02, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -2.0422e-01,  1.0895e-01, -1.0461e-01,  0.0000e+00,          2.7856e-01,  2.3895e-02, -2.4377e-01, -3.9844e-01, -5.5176e-01,          2.8809e-01, -9.3164e-01,  2.7954e-01,  5.9448e-02,  8.8867e-02,         -1.8726e-01, -1.9336e-01,  2.3331e-02,  1.6663e-01, -8.6487e-02,         -1.3135e-01, -6.6406e-02,  1.9934e-01, -1.1615e-01, -4.1595e-02,          8.5388e-02, -2.5996e+00, -2.1252e-01,  5.4883e-01,  5.0146e-01,          4.8022e-01, -1.1157e-01, -2.0239e-01, -3.0444e-01, -4.6906e-02,          2.2913e-01,  8.2520e-02,  0.0000e+00,  2.2437e-01,  1.5588e-01,         -1.3171e-01, -2.2791e-01,  1.0980e-01, -1.0632e-01, -2.3096e-01,          4.2480e-01, -4.5361e-01,  4.5972e-01, -0.0000e+00, -1.0669e-01,          2.7271e-01, -1.9531e-01, -3.1158e-02,  5.6061e-02,  1.9348e-01,         -0.0000e+00,  3.7085e-01,  0.0000e+00, -0.0000e+00,  1.7383e-01,         -0.0000e+00,  7.4402e-02},        { 1.1371e-01,  7.8796e-02,  9.0820e-02, -0.0000e+00,  1.6943e-01,         -2.1973e-01,  1.2683e-01,  1.5051e-01,  4.3579e-02, -5.0476e-02,         -1.9092e-01, -0.0000e+00, -1.9702e-01, -1.4673e-01,  3.3569e-01,         -0.0000e+00,  2.4658e-01, -5.3040e-02, -5.8380e-02, -2.2070e-01,         -1.1658e-01, -2.7710e-01, -2.0496e-01, -1.0706e-01,  8.7967e-03,         -2.7008e-02, -2.1252e-01,  2.3169e-01,  2.3706e-01, -4.3286e-01,         -9.3689e-02,  1.3928e-01,  3.1152e-01,  3.7378e-01, -5.7556e-02,         -5.2551e-02, -7.1716e-02, -6.2439e-02,  6.8481e-02,  5.6427e-02,          1.4014e-01, -8.6182e-02, -2.6123e-01, -0.0000e+00, -1.5576e-01,          1.3550e-01, -3.7280e-01,  3.9209e-01, -0.0000e+00,  1.5637e-01,          0.0000e+00,  4.3701e-02,  2.0154e-01, -0.0000e+00,  2.2278e-01,          2.0435e-01, -7.7393e-01, -2.9968e-02,  1.2817e-01, -4.6509e-01,          1.7310e-01,  2.1881e-02,  0.0000e+00,  3.6011e-02, -1.0699e-01,         -1.5308e-01, -2.8152e-02, -2.7222e-01,  2.1204e-01, -1.5137e-01,          1.6724e-01,  7.0703e-01},        { 2.2363e-01,  0.0000e+00, -1.7725e-01,  1.2390e-02,  1.5161e-01,         -3.8940e-02,  5.7715e-01, -1.9983e-01, -2.1375e-01,  0.0000e+00,          1.2262e-01,  1.2988e-01, -1.6541e-01,  0.0000e+00,  2.0007e-01,          7.8430e-02, -1.2268e-01,  0.0000e+00, -0.0000e+00, -2.3511e-01,         -2.3853e-01, -1.3062e-01, -1.7065e-01, -4.0710e-02, -2.2778e-01,          3.1519e-01,  1.9409e-01, -7.2205e-02,  2.0398e-01,  0.0000e+00,         -2.2766e-01,  8.5938e-02,  2.0557e-01, -7.2144e-02,  2.8296e-01,          2.8442e-01,  4.5337e-01,  1.1792e-01, -1.3867e-01, -0.0000e+00,          5.6229e-03,  9.3018e-02, -1.7529e-01,  5.8838e-01,  1.5083e-02,         -5.7220e-02, -2.9175e-01,  1.0291e-01, -2.8027e-01,  4.5386e-01,         -1.0017e-02, -1.3171e-01, -1.8921e-02,  6.8115e-02, -1.4661e-01,         -1.3062e-01, -1.3989e-01,  0.0000e+00,  2.3218e-01, -0.0000e+00,          1.8420e-01, -1.7834e-01,  9.3079e-02, -0.0000e+00,  2.1826e-01,         -0.0000e+00, -9.9731e-02,  2.5708e-01,  1.3354e-01, -6.8237e-02,         -3.2013e-02,  1.7090e-01},        { 3.1787e-01,  4.1333e-01, -6.3477e-02, -3.5706e-02,  1.1249e-01,         -3.3203e-01, -5.7617e-01,  1.3599e-01, -7.3547e-02,  1.5662e-01,         -5.6488e-02,  4.7913e-02, -2.0789e-01, -1.7502e-02,  2.0966e-02,          4.5459e-01, -0.0000e+00,  0.0000e+00, -5.2783e-01, -2.9004e-01,          2.0862e-01,  0.0000e+00,  0.0000e+00,  8.5815e-02,  6.5869e-01,         -1.5161e-01,  1.6870e-01, -1.0547e-01,  4.5435e-01, -0.0000e+00,         -1.3391e-01,  2.4768e-01,  4.2633e-02, -2.6886e-02, -0.0000e+00,          8.1238e-02,  2.4280e-01,  3.3643e-01,  3.8843e-01,  6.6467e-02,         -1.3245e-01,  1.5857e-01, -5.6836e-01, -4.6167e-01,  9.2163e-02,         -0.0000e+00,  1.0242e-01, -6.0089e-02,  0.0000e+00,  2.2522e-01,         -2.1533e-01, -2.3877e-01,  7.9590e-02,  9.3811e-02,  1.2866e-01,          2.4841e-01, -1.5552e-01, -1.8539e-02,  1.7224e-01, -3.8623e-01,         -2.8174e-01,  1.2085e-01,  9.5337e-02,  2.0850e-01, -7.7576e-02,          1.1792e-01, -6.6772e-02, -2.2302e-01, -1.8250e-01,  1.6464e-02,         -1.0101e-01,  1.7383e-01},        { 5.2216e-02,  4.6021e-01, -3.2397e-01, -0.0000e+00,  9.0881e-02,         -2.7930e-01,  9.6252e-02, -3.1348e-01,  0.0000e+00,  0.0000e+00,          1.0150e-01,  3.5187e-02, -4.5410e-02, -2.4792e-01, -7.3181e-02,          9.1003e-02, -7.1472e-02,  1.0602e-01,  1.6956e-01, -5.9912e-01,          4.0967e-01, -4.0588e-02, -4.5258e-02, -1.2384e-01, -2.8516e-01,          2.6489e-01, -1.7603e-01,  6.9641e-02,  8.6975e-02,  3.6938e-01,         -4.4751e-01,  6.7627e-02, -8.1055e-02, -1.4148e-01,  2.5366e-01,         -0.0000e+00,  1.6199e-01,  7.8003e-02,  6.0791e-01, -7.4646e-02,          6.7078e-02,  7.2815e-02,  0.0000e+00,  8.2581e-02, -1.1450e-01,          6.1554e-02, -9.6375e-02,  7.9773e-02, -1.1963e-01,  9.7778e-02,         -2.1948e-01, -3.3875e-02,  1.9250e-01,  1.8909e-01, -3.3643e-01,          4.8218e-01,  2.3596e-01,  1.6309e-01,  6.0028e-02, -1.3306e-01,          1.8579e-01, -4.5947e-01,  7.0801e-02, -4.3030e-02,  6.4697e-02,          3.8867e-01, -0.0000e+00,  6.5796e-02,  1.0643e-02, -0.0000e+00,          3.5614e-02, -1.7517e-01},        {-0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,          0.0000e+00, -0.0000e+00, -0.0000e+00,  0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00,  0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  0.0000e+00,          0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,  0.0000e+00,         -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00, -0.0000e+00,         -0.0000e+00,  0.0000e+00},        { 1.0553e-01, -1.1481e-01, -1.2573e-01, -2.4927e-01,  9.1858e-02,          2.8564e-01, -1.6174e-01,  0.0000e+00, -1.6003e-01,  2.9282e-02,          0.0000e+00,  2.6343e-01,  1.9727e-01,  2.3303e-01, -1.2891e-01,         -2.4609e-01,  5.5420e-01,  2.5781e-01,  3.2275e-01,  0.0000e+00,          0.0000e+00, -1.0175e-01, -2.0569e-01,  7.1960e-02,  3.4619e-01,         -3.2056e-01,  1.5918e-01, -5.5542e-02,  1.6052e-01, -8.3252e-02,          1.9165e-01, -3.9429e-01,  0.0000e+00, -2.3804e-01, -6.3171e-02,          5.8807e-02,  1.4417e-01, -1.1774e-01, -2.2437e-01, -1.3464e-01,         -5.0635e-01,  1.8970e-01,  3.4668e-01, -2.8296e-01,  2.9834e-01,         -6.3477e-02, -9.1614e-02,  1.9409e-01,  3.3740e-01, -2.0544e-01,          1.8188e-01, -1.5210e-01, -1.2244e-01,  1.4233e-01,  1.8738e-01,         -1.1487e-01,  1.4746e-01, -3.1714e-01, -0.0000e+00,  2.0581e-01,         -3.3398e-01, -1.3892e-01,  2.7344e-02,  1.4832e-01,  9.8755e-02,          2.6172e-01,  5.9479e-02,  1.2201e-01,  5.6793e-02, -4.9292e-01,          4.6143e-01, -2.4548e-01},        { 3.0136e-02,  1.0944e-01, -1.4612e-01,  2.5488e-01, -4.6021e-02,         -2.8915e-02,  6.2500e-01, -0.0000e+00, -3.8910e-02, -0.0000e+00,          1.6760e-01,  2.0459e-01,  5.4535e-02,  1.5747e-01, -5.4871e-02,         -1.2708e-01, -1.1462e-01,  2.5684e-01,  1.8555e-01, -3.4961e-01,          1.3098e-01, -1.5601e-01,  9.3445e-02, -9.8450e-02, -8.3398e-01,          3.0127e-01, -8.9966e-02, -4.3823e-02, -3.4851e-02,  0.0000e+00,         -9.4055e-02, -2.4048e-01,  5.1788e-02, -2.3975e-01,  2.6953e-01,          3.0609e-02,  0.0000e+00, -2.6123e-01,  1.1810e-01,  5.2856e-02,          2.1216e-01,  6.9336e-02,  3.0957e-01,  7.2168e-01,  2.4490e-02,         -5.8197e-02, -1.3220e-01, -8.7769e-02, -1.3635e-01, -1.8677e-02,         -0.0000e+00,  1.7725e-01,  2.3535e-01,  1.8188e-01, -3.8232e-01,         -3.4454e-02, -0.0000e+00,  3.1689e-01,  4.5471e-02,  1.2152e-01,          3.6841e-01,  6.0425e-02,  1.1713e-01,  1.1493e-01, -0.0000e+00,         -1.1780e-01,  1.1060e-01,  1.4417e-01,  9.0271e-02,  1.4941e-01,          4.1351e-02,  2.0935e-01},        { 9.8267e-02, -4.9292e-01,  5.1807e-01, -7.1594e-02, -1.2103e-01,          3.9307e-01, -4.9878e-01,  1.4404e-01,  1.2299e-01,  2.3157e-01,          8.4473e-02,  3.6621e-02,  4.5746e-02,  1.9177e-01,  0.0000e+00,          4.4702e-01,  1.2927e-01,  1.9577e-02,  0.0000e+00,  1.8567e-01,         -2.6245e-01,  9.7656e-02, -0.0000e+00,  2.9810e-01,  6.9873e-01,         -3.7506e-02,  4.1229e-02,  1.4929e-01, -1.0956e-01,  2.8101e-01,          3.4229e-01,  1.8677e-01,  7.3975e-02,  9.9731e-02,  1.7639e-01,          0.0000e+00, -2.3523e-01,  1.0089e-01, -3.7842e-01,  2.3950e-01,         -1.3904e-01,  2.3132e-02,  1.7883e-01, -3.5059e-01,  1.0120e-01,          1.6138e-01,  0.0000e+00, -5.2856e-02,  5.1819e-02, -1.0931e-01,          2.1021e-01,  2.4561e-01,  1.2708e-01,  9.2224e-02,  4.3213e-01,         -3.0371e-01,  7.2266e-01, -6.2103e-02, -5.7678e-02,  4.5654e-01,         -3.9160e-01,  6.0791e-02,  8.9294e-02,  2.0410e-01,  1.9543e-01,          0.0000e+00, -2.0447e-01,  1.3293e-01, -0.0000e+00,  2.5537e-01,         -5.3436e-02, -1.1359e-01},        {-6.1584e-02, -3.5767e-01,  3.7781e-02,  1.2299e-01, -6.9397e-02,          3.9014e-01,  3.3887e-01, -1.7151e-01,  3.1714e-01,  1.8372e-01,         -0.0000e+00, -6.4392e-02,  7.2388e-02,  9.3079e-02, -7.1373e-03,          2.4084e-01,  0.0000e+00, -1.2903e-01, -1.3611e-02,  7.7393e-01,         -2.1997e-01,  3.8110e-01, -1.6187e-01, -7.8857e-02,  8.7646e-02,          1.0144e-01, -3.4375e-01,  1.4099e-01, -0.0000e+00, -0.0000e+00,         -9.6924e-02, -1.2744e-01,  0.0000e+00, -5.4169e-02,  2.0581e-01,          0.0000e+00, -4.0503e-01, -0.0000e+00, -3.4033e-01, -9.2651e-02,          2.9370e-01, -2.9724e-02,  2.5781e-01,  3.0444e-01, -3.2935e-01,          7.4219e-02,  9.2834e-02,  1.1133e-01,  3.9795e-02,  2.4707e-01,          2.1021e-01,  0.0000e+00, -1.2744e-01,  1.2250e-01,  1.2793e-01,         -3.2617e-01,  1.2964e-01, -0.0000e+00,  0.0000e+00,  2.3608e-01,          1.0858e-01, -9.1614e-02,  1.8262e-01,  2.6782e-01,  2.7686e-01,          0.0000e+00, -1.5723e-01,  5.1483e-02,  0.0000e+00,  1.7603e-01,          1.4441e-01, -6.4392e-02},        { 0.0000e+00,  9.8022e-02, -0.0000e+00,  4.0131e-02,  2.5806e-01,          1.1914e-01,  3.8794e-01, -1.6101e-01, -9.2346e-02,  1.1566e-01,         -3.9941e-01, -2.1204e-01, -0.0000e+00,  1.2360e-01,  1.5503e-01,          2.7612e-01,  1.2061e-01, -1.5625e-01,  0.0000e+00,  4.3311e-01,          0.0000e+00, -0.0000e+00, -1.9812e-01, -5.8685e-02, -4.5557e-01,         -6.9336e-02, -2.4573e-01, -1.4368e-01,  3.0640e-01, -3.6206e-01,         -5.5359e-02, -3.6670e-01,  1.6528e-01,  8.3008e-02,  0.0000e+00,          8.2642e-02, -8.8684e-02, -2.4512e-01,  9.0088e-02,  6.4758e-02,          2.2900e-01,  1.2903e-01,  1.6052e-01,  3.6157e-01, -1.7175e-01,          1.0901e-01, -1.9055e-01,  1.8591e-01,  1.5247e-01,  2.0178e-01,         -6.0181e-02,  8.1604e-02, -3.0444e-01,  7.0557e-02,  1.7786e-01,          2.4158e-01, -3.3936e-01,  9.0027e-02,  2.7246e-01,  1.3257e-01,          5.0391e-01, -6.8237e-02, -6.4026e-02,  1.3806e-01, -1.4380e-01,          1.6943e-01,  2.4487e-01,  8.4290e-02, -0.0000e+00,  2.3401e-01,          2.4390e-01,  4.4482e-01},        { 6.5967e-01, -2.5830e-01,  1.5796e-01, -6.7480e-01,  5.0476e-02,          3.9978e-02,  1.4514e-01,  1.3013e-01, -1.1542e-01,  0.0000e+00,          1.7761e-01,  2.8394e-01, -1.0474e-01, -0.0000e+00, -0.0000e+00,          1.9006e-01, -6.2622e-02, -2.0126e-02,  3.3276e-01,  2.6294e-01,          5.7434e-02, -7.0251e-02, -3.9185e-02,  3.8208e-01,  4.1943e-01,          2.6392e-01,  3.8330e-01,  4.5776e-01,  1.4001e-01,  1.9678e-01,          2.3865e-01,  8.1482e-02,  6.0760e-02,  1.8982e-01,  4.1553e-01,          1.4551e-01,  7.5439e-01,  5.4346e-01, -2.6611e-01,  2.9736e-01,         -8.1689e-01,  2.5928e-01, -1.1871e-01,  1.9690e-01, -9.0820e-02,          5.0293e-01,  5.1483e-02,  0.0000e+00, -2.1936e-01, -3.9038e-01,          5.6244e-02,  6.3965e-02, -3.3179e-01,  2.1155e-01, -9.0454e-02,         -3.9673e-01,  5.0977e-01, -1.0078e+00,  8.1421e-02,  9.6497e-02,         -4.6216e-01,  7.0984e-02,  1.3232e-01, -2.1167e-01,  1.1086e-02,         -1.9556e-01, -1.4050e-01, -4.8370e-02,  5.5046e-03,  1.7273e-01,         -1.0730e-01, -2.0703e-01},        { 1.7212e-01, -4.2676e-01,  5.4626e-02, -6.7810e-02,  1.5320e-01,          3.8184e-01,  1.6553e-01, -8.5083e-02,  1.1493e-01,  0.0000e+00,         -1.5759e-01,  1.0938e-01, -0.0000e+00,  2.1619e-01,  1.5833e-01,          1.8054e-01, -7.6111e-02,  2.1497e-01,  2.3218e-01,  7.0410e-01,         -2.7026e-01,  3.4839e-01, -3.3173e-02,  2.0837e-01,  0.0000e+00,          3.8330e-01,  1.3501e-01,  1.5234e-01,  5.9631e-02,  1.1322e-01,          1.0504e-01,  3.9380e-01,  8.9233e-02,  2.3743e-01,  1.7114e-01,          1.6345e-01,  4.4220e-02,  2.3267e-01, -5.0195e-01,  1.1432e-01,          2.6489e-01, -3.0548e-02, -0.0000e+00,  2.3608e-01, -6.8237e-02,          4.4983e-02,  1.1511e-01,  5.4138e-02, -1.2335e-01,  2.2046e-01,          3.6426e-01, -9.8267e-02,  0.0000e+00, -0.0000e+00,  5.2686e-01,         -5.2734e-01,  2.5562e-01, -6.9702e-02,  0.0000e+00,  2.3181e-01,          2.3633e-01, -2.7368e-01,  1.5747e-01,  1.0095e-01, -1.7688e-01,          1.7078e-01, -2.6440e-01,  1.5735e-01,  1.5918e-01, -0.0000e+00,         -0.0000e+00,  2.9688e-01},        {-3.0960e-02, -4.8071e-01,  1.0339e-01,  0.0000e+00,  0.0000e+00,          4.7534e-01,  3.1616e-01,  5.6244e-02, -0.0000e+00,  1.1981e-01,         -1.1670e-01,  0.0000e+00,  1.0547e-01,  2.3938e-01,  1.3330e-01,          1.7932e-01,  0.0000e+00, -1.8848e-01,  2.3218e-01,  4.7070e-01,         -3.5742e-01,  1.2128e-01, -1.9275e-01,  0.0000e+00, -2.7710e-01,          1.2744e-01,  0.0000e+00,  1.8958e-01, -5.8533e-02, -7.3181e-02,          0.0000e+00, -4.0723e-01,  9.6008e-02,  6.9824e-02,  3.2056e-01,         -6.4758e-02,  0.0000e+00, -8.3191e-02, -4.4165e-01, -1.2201e-01,          7.1899e-02,  1.2219e-01,  3.4741e-01,  4.4043e-01, -0.0000e+00,          8.7585e-02, -1.0608e-01,  1.1298e-01,  5.8167e-02,  0.0000e+00,          3.2251e-01,  1.5503e-01, -1.2439e-01, -5.2246e-02,  2.1509e-01,         -3.7402e-01,  1.7725e-01, -9.4116e-02,  1.4404e-01,  4.3970e-01,          8.0017e-02, -3.4332e-02,  9.3750e-02,  1.5051e-01, -7.2510e-02,          2.8638e-01,  0.0000e+00,  1.5515e-01,  1.3904e-01,  1.1554e-01,          9.3872e-02,  5.9753e-02},        { 8.6670e-02,  1.4783e-01,  1.7786e-01, -4.5435e-01, -1.0187e-01,          0.0000e+00, -1.2366e-01, -0.0000e+00,  7.1960e-02, -2.9346e-01,         -1.7105e-02, -9.6680e-02,  2.8320e-01,  1.5674e-01,  0.0000e+00,          1.9263e-01,  7.3340e-01,  0.0000e+00,  0.0000e+00,  1.2238e-01,          2.0276e-01,  3.4839e-01, -4.2920e-01, -7.3425e-02,  2.7856e-01,         -1.0229e-01, -1.6394e-01,  5.7037e-02, -1.3721e-01, -1.9775e-01,          2.0239e-01,  0.0000e+00, -1.2671e-01,  2.2571e-01, -1.2285e+00,          2.1057e-01, -0.0000e+00, -3.7994e-02,  2.7661e-01, -1.9989e-02,         -7.7246e-01,  9.4421e-02, -1.3354e-01, -2.2656e-01, -1.2695e-01,         -1.2646e-01, -2.0215e-01,  5.1788e-02,  5.4150e-01,  1.0773e-01,         -0.0000e+00,  3.5083e-01,  3.0151e-01,  4.2310e-01,  1.9482e-01,          2.6807e-01, -0.0000e+00, -6.9971e-01,  5.5908e-02,  6.1493e-02,         -2.4329e-01, -1.0718e-01,  2.9370e-01, -1.2769e-01, -5.2795e-02,          1.7798e-01,  6.2402e-01, -1.5332e-01, -3.4790e-02,  3.3447e-01,          6.8994e-01,  1.0748e-01},        { 1.1334e-01, -2.2192e-01,  3.2861e-01, -4.3793e-02,  4.0588e-02,          1.3635e-01, -9.7363e-01,  1.6443e-01,  7.5684e-02, -9.1309e-02,         -1.3745e-01, -0.0000e+00,  1.1597e-01,  4.7089e-02,  6.6406e-02,          2.3462e-01,  0.0000e+00,  9.5154e-02, -3.7622e-01, -1.8311e-01,         -3.1055e-01,  3.1812e-01, -2.4048e-01,  1.2915e-01,  7.6758e-01,          2.0605e-01, -0.0000e+00,  1.6907e-01, -4.3030e-02,  2.0508e-01,         -0.0000e+00,  1.2720e-01, -5.0232e-02,  6.6772e-02,  3.0457e-02,         -0.0000e+00,  2.0874e-01, -1.0455e-01, -9.9976e-02, -2.1521e-01,         -2.4451e-01,  2.1179e-01,  0.0000e+00, -7.8223e-01,  1.3684e-01,         -1.4636e-01,  0.0000e+00,  1.1139e-01,  4.4403e-02,  3.4082e-01,          0.0000e+00, -4.6570e-02, -7.2021e-02, -6.9092e-02,  5.3070e-02,         -0.0000e+00, -2.4756e-01,  1.5030e-02, -1.2744e-01,  9.9182e-02,         -4.6118e-01,  1.3708e-01,  1.0480e-01, -7.4036e-02, -7.3547e-02,         -1.5430e-01,  1.6821e-01,  1.2779e-02, -1.2683e-01, -1.3062e-01,         -0.0000e+00,  1.1975e-01},        { 9.4116e-02, -4.9408e-02,  5.5811e-01,  6.1920e-02,  3.2935e-01,          1.3977e-01, -1.0077e-01,  1.8970e-01,  2.7466e-01, -4.1309e-01,          1.0620e-01, -1.1017e-01, -1.4893e-01, -0.0000e+00, -0.0000e+00,          1.1121e-01, -4.0186e-01,  0.0000e+00,  5.2795e-02,  2.2424e-01,          0.0000e+00, -0.0000e+00, -3.7964e-02,  2.7661e-01,  1.3879e-01,          4.2389e-02,  8.1848e-02,  8.5083e-02, -1.5137e-01,  3.0176e-01,          1.1853e-01,  2.6562e-01, -2.6291e-02,  3.3447e-01,  2.8296e-01,          1.4709e-01,  8.4229e-02,  2.2632e-01,  2.2720e-02, -8.9539e-02,          2.3608e-01,  1.0773e-01, -3.9648e-01, -7.8979e-02, -2.8107e-02,         -7.2815e-02,  0.0000e+00, -2.1863e-01, -1.0352e-01, -4.7729e-02,         -2.8125e-01, -1.6223e-01, -3.3179e-01, -1.9714e-01,  1.5869e-01,          7.6416e-02,  7.0508e-01,  1.1603e-01,  4.0405e-01,  1.5479e-01,          3.0762e-01, -0.0000e+00, -1.2457e-01, -1.6663e-01,  6.8237e-02,          2.6367e-01, -3.1787e-01,  5.0049e-02, -2.6392e-01, -1.0077e-01,         -4.7607e-01,  0.0000e+00}};
// MODIFY weight2 END
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=layer2_out
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=bias2
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=weights2

    for (int i = 0; i < 32; i++) {
#pragma HLS UNROLL
        layer2_out[i] = bias2[i];
        for (int j = 0; j < 72; j++) {
            layer2_out[i] += layer2_in[j] * weights2[i][j];
        }

        if (layer2_out[i] > 0){
            layer2_out[i] = layer2_out[i];
        } else{
            layer2_out[i] = 0;
        }
//        std::cout << "layer2_out " << layer2_out[i] << endl;
    }

    //---------------------- ----- ----------------------
    //---------------------- FC  3 ----------------------
    //---------------------- ----- ----------------------

    input_type layer3_out[6];
// MODIFY bias3 BEGIN
input_type bias3[6] = {-0.1093, -0.0556, -0.1689, -0.1030,  0.1742, -0.0602};
// MODIFY bias3 END
// MODIFY weight3 BEGIN
input_type weights3[6][32] = {{-0.2888, -0.1242,  0.0960,  0.4282, -0.4575,  0.4963, -0.0000,  0.0000,          0.0774,  0.3127,  0.1453,  0.0145, -0.3486,  0.1560, -0.2810,  0.6016,         -0.1722, -0.3647, -0.3999,  0.3347, -0.0000,  0.0274,  0.2510, -0.4609,          0.1588,  0.3611, -0.5410, -0.3792, -0.0384, -0.1201, -0.0000,  0.1294},        {-0.5029,  0.3013, -0.0593,  0.0989, -0.0000,  0.0933, -0.0000, -0.5400,         -0.1064,  0.4163,  0.0000,  0.2004,  0.4583, -0.5391,  0.0594, -0.0556,         -0.1525, -0.4788,  0.1771, -0.0000,  0.0000,  0.6260, -0.0000,  0.1327,         -0.3979,  0.0000,  0.1707, -0.6128, -0.0000,  0.8364,  0.3682, -0.5566},        {-0.5273,  0.0765,  0.5879, -0.2449,  0.1213,  0.0000,  0.0000, -0.1550,          0.0497,  0.0000, -0.4541, -0.5762,  0.0895, -0.6958,  0.3738, -0.1107,         -0.3054,  0.4309, -0.2566,  0.0831,  0.0000,  0.2683,  0.3311, -0.1667,          0.4834,  0.4907,  0.0000,  0.1157,  0.5645,  0.0000, -0.0970,  0.2803},        { 0.1602,  0.4739,  0.1813,  0.4497, -0.2124,  0.5190, -0.0000, -0.1065,          0.4268, -0.0000,  0.1138, -0.2142, -0.4297, -0.1062, -0.0941, -0.6597,         -0.2026,  0.0880, -0.0492,  0.6064, -0.0000, -0.0913,  0.4443, -0.4326,         -0.3394, -0.1058,  0.8213, -0.3967, -0.2898, -0.0000, -0.8247, -0.0399},        { 0.0816, -0.4490,  0.1570, -0.0821, -0.1219,  0.7065,  0.0000,  1.2129,         -0.5806,  0.1259,  0.0000, -0.1805,  0.4133, -0.1610,  0.4666,  0.1256,         -0.4065, -0.2147,  0.3257,  0.2585,  0.0000, -0.1001, -0.3433,  0.1947,         -0.2014, -0.1869, -0.1656, -0.0000, -0.4219, -0.6406,  0.7456,  0.2119},        {-0.3350,  0.4868,  0.3105, -0.1299, -0.1520, -0.2144,  0.0000, -0.1427,          0.2190, -0.1864, -0.6904,  0.9736, -0.0000,  0.1129,  0.1820,  0.0912,         -0.4292, -0.1251, -0.4888, -0.1316, -0.0000,  0.1815,  0.0655,  0.3623,          0.1995, -0.1741, -0.0621,  0.2102,  0.3220,  0.0442, -0.2150, -0.0525}};
// MODIFY weight3 END
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=layer3_out
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=bias3
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=weights3

    for (int i = 0; i < 6; i++) {
#pragma HLS UNROLL
        layer3_out[i] = bias3[i];
        for (int j = 0; j < 32; j++) {
            layer3_out[i] = layer3_out[i] + layer2_out[j] * weights3[i][j];
        }
        output_type constant = 1;
        layer3_out[i] = constant / (1 + hls::exp(ap_fixed<20, 10>(-layer3_out[i])));
//        layer3_out[i] = constant / (1 + exp(-layer3_out[i]));
//        std::cout << "layer3_out " << layer3_out[i] << endl;
    }


    input_type dcmp_value = 0.5;

    output_type output_temp[6] = {0,0,0,0,0,0};
#pragma HLS ARRAY_PARTITION dim=0 type=complete variable=output_temp

    for (int i = 0; i < 6; i++) {
//#pragma HLS UNROLL
        if (layer3_out[i] > dcmp_value){
            output_temp[i] = 1;
        } else{
            output_temp[i] = 0;
        }
    }

//    for (int i = 0; i < OUT_CH; ++i) {
//#pragma HLS UNROLL
//        output[i] = layer3_out[i];
//    }
    output[0] = output_temp[0];
    output[1] = output_temp[1];
    output[2] = output_temp[2];
    output[3] = output_temp[3];
    output[4] = output_temp[4];
    output[5] = output_temp[5];
}



